if(BF){
o11=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd)))
o10=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd)))
}else{
o11=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd))
o10=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd))
}
nnaa=c("lower(a)","upper(a)","pv(a)")
nnbb=c("lower(b)","upper(b)","pv(b)")
nnba=c("lower(n)","upper(n)","pv(n)")
V.matrix=create_vmatrix(GT)
if(sum(dt$S,na.rm = T)==0){
GT$theta_hat$bc[is.na(GT$theta_hat$bc)]=0
V.matrix[is.na(V.matrix)]=0
}
if(nb>0){
cl = snow::makeCluster(mc)
doSNOW::registerDoSNOW(cl)
pb = txtProgressBar(max = nb, style = 3)
progress = function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
var.boot=data.table::rbindlist(foreach::foreach(boot.count=1:nb, .options.snow = opts, .packages = "data.table") %dopar% {
create_var_boot(dt,cnfd,dt2,cnfd2,dt3,cnfd3,nb,intv,reNAME,grpID,x0,x1,BF,stra,seed=seed*boot.count) })
snow::stopCluster(cl)
set.seed(seed)
bsRD1= bss(1,var.boot,F,F); bsRD2=bss(2,var.boot,F,F);bsRD3= bss(3,var.boot,F,F);bsRDT=bss(13,var.boot,F,F)
pmRD1=bss(16,var.boot,F,T);pmRD2=bss(17,var.boot,F,T);pmRD3=bss(18,var.boot,F,T)
if(BF){
bsRR1= bss(4,var.boot,T,T); bsRR2=bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bsOR1= bss(7,var.boot,T,T); bsOR2=bss(8,var.boot,T,T);bsOR3= bss(9,var.boot,T,T);bsORT=bss(15,var.boot,T,T)
pmRR1=bss(19,var.boot,F,T);pmRR2=bss(20,var.boot,F,T);pmRR3=bss(21,var.boot,F,T)
pmOR1=bss(22,var.boot,F,T);pmOR2=bss(23,var.boot,F,T);pmOR3=bss(24,var.boot,F,T)
}
}
bsRD1
exp(3)
exp(c(3,5))
quantile(dd, c(0.05, 0.95)
)
quantile(dd, c(0.05, 0.95))
quantile(1:100, c(0.05, 0.95))
exp(quantile(1:100, c(0.05, 0.95))
)
bsRD1= bss(1,var.boot,F,F); bsRD2=bss(2,var.boot,F,F);bsRD3= bss(3,var.boot,F,F);bsRDT=bss(13,var.boot,F,F)
pmRD1=bss(16,var.boot,F,T);pmRD2=bss(17,var.boot,F,T);pmRD3=bss(18,var.boot,F,T)
bsRR1= bss(4,var.boot,T,T); bsRR2=bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bsOR1= bss(7,var.boot,T,T); bsOR2=bss(8,var.boot,T,T);bsOR3= bss(9,var.boot,T,T);bsORT=bss(15,var.boot,T,T)
bsRR1= bss(4,var.boot,T,T)
bsRR1
dd=var.boot[[4]]
dd
sddd=sd(dd,na.rm = T)
if(pos){ dd=dd[dd>=0] }
pos=T;log_scale=T
if(pos){ dd=dd[dd>=0] }
cc=length(dd)
if(log_scale){ vv=sum(dd>1)/cc }else{ vv=sum(dd>0)/cc }
pp=min(vv,(1-vv))*2
exact=c(quantile(dd,c(.05,.95),pp))
exact
if(log_scale){ dd=log(dd) }
cc=1e+6; dd=rnorm(cc, mean=mean(dd,na.rm = T), sd=sd(dd,na.rm = T))
vv=sum(dd>0)/cc;
pp=min(vv,(1-vv))*2
if(log_scale){ appxn=c(exp(quantile(dd,c(.05,.95)),pp))  }else{ appxn=c(quantile(dd,c(.05,.95),pp)) }
if(log_scale){ appxn=c(exp(quantile(dd,c(.05,.95))),pp)  }else{ appxn=c(quantile(dd,c(.05,.95)),pp) }
source('~/Dropbox/R_packages/SOMM/R/bss.R')
bsRR1= bss(4,var.boot,T,T);bsRR2= bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bbsRR1
bsRR1
exact
source('~/Dropbox/R_packages/SOMM/R/bss.R')
bsRR1= bss(4,var.boot,T,T);bsRR2= bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bsRR1
detach("package:SOMM", unload=TRUE)
setwd("~/Dropbox/R_packages/SOMM/")
document()
#check(manual = T)
#build_manual()
setwd("..")
install("SOMM")
library(SOMM)
load("~/Dropbox/R_packages/QwQ/C2_AI.RData")
c1=mediation_analysis(dt=dat,nb=100,intv=4,mc=5,stra=5,reNAME="uid")
c1
load("~/Dropbox/R_packages/QwQ/C2_AI.RData")
sapply(paste0("SOMM/R/",dir("SOMM/R")),source)
sapply(paste0("R/",dir("SOMM/R")),source)
sapply(paste0("/R/",dir("SOMM/R")),source)
sapply(paste0("R/",dir("/R")),source)
sapply(paste0("/R",dir("/R")),source)
sapply(paste0("/R/",dir("/R/")),source)
sapply(paste0("~/Dropbox/R_packages/SOMM/R/",dir("~/Dropbox/R_packages/SOMM/R/")),source)
load("~/Dropbox/R_packages/QwQ/C2_AI.RData")
dt=dat;cnfd=c();dt2=NULL;cnfd2=c();dt3=NULL;cnfd3=c()
nb=100;intv=4;unit=1;reNAME="uid";grpID=NULL;mc=5;autoR=T;stra=5;seed=217;exact=T
if(!is.null(cnfd)){
if(!all(names(cnfd)%in%names(dt)) | is.null(names(cnfd)))
return("Colnames of covariates should a subset of colnames of dataset.")
}
print(paste0("Note: Estimating PSE on ",colnames(dt)[2],"(W) > ",colnames(dt)[3],"(Q) > ",colnames(dt)[4],"(S) > ",colnames(dt)[1],"(Y)"))
colnames(dt)[1:4]=c("Y","W","Q","S")
if(!is.null(reNAME)){
print("Warn: The asymptotic CI/p-values using random effect models may be inaccurate.")
if(nb==0){ nb=500; print("Note: Applying bootstrapping 500 times.") }
colnames(dt)[colnames(dt)==reNAME]="id"
}
if(!is.null(grpID)){
print("Warn: The asymptotic CI/p-values using conditional logistic models may be inaccurate.")
if(nb==0){ nb=500; print("Note: Applying bootstrapping 500 times.") }
colnames(dt)[colnames(dt)==grpID]="grp"
}
if(!is.null(dt2)){
print(paste0("Note: Using another population for estimating ",colnames(dt2)[1],"(W) > ",colnames(dt2)[2],"(Q) > ",colnames(dt2)[3],"(S)"))
colnames(dt2)[1:3]=c("W","Q","S")
colnames(dt2)[colnames(dt2)==grpID]="grp"
}
if(!is.null(dt3)){
print(paste0("Note: Using another population for estimating ",colnames(dt3)[1],"(W) > ",colnames(dt3)[2],"(Q)"))
colnames(dt3)[1:2]=c("W","Q")
colnames(dt3)[colnames(dt3)==grpID]="grp"
}
if(unit=="IQR"){
QQ=quantile(dt$W,na.rm=T);
x0=QQ[[2]]; x1=QQ[[4]]
}else{
x0=0; x1=1
}
GT=get_theta(dt,dt2,dt3,reNAME,grpID)
BF=ifelse(all(dt$Y%in%c(0,1)),T,F)
fid=unique(c(names(dt)[which(sapply(dt,is.factor))],names(dt)[which(sapply(dt,is.character))]))
eid1=names(cnfd)%in%c(fid,names(GT$theta_hat$bc))
eid2=names(cnfd2)%in%c(fid,names(GT$theta_hat$ac))
eid3=names(cnfd3)%in%c(fid,names(GT$theta_hat$dc))
if(sum(!eid1)!=0){ print(paste("model Y remove covariate:",paste(names(cnfd)[!eid1],collapse = ", "))) }
if(length(cnfd2)!=0&sum(!eid2)!=0){ print(paste("model S remove covariate:",paste(names(cnfd2)[!eid2],collapse = ", "))) }
if(length(cnfd3)!=0&sum(!eid3)!=0){ print(paste("model Q remove covariate:",paste(names(cnfd3)[!eid3],collapse = ", "))) }
cnfd=cnfd[eid1]; cnfd2=cnfd2[eid2]; cnfd3=cnfd3[eid3]
if(BF){
o11=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd)))
o10=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd)))
}else{
o11=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd))
o10=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd))
}
nnaa=c("lower(a)","upper(a)","pv(a)")
nnbb=c("lower(b)","upper(b)","pv(b)")
nnba=c("lower(n)","upper(n)","pv(n)")
V.matrix=create_vmatrix(GT)
if(sum(dt$S,na.rm = T)==0){
GT$theta_hat$bc[is.na(GT$theta_hat$bc)]=0
V.matrix[is.na(V.matrix)]=0
}
if(nb>0){
cl = snow::makeCluster(mc)
doSNOW::registerDoSNOW(cl)
pb = txtProgressBar(max = nb, style = 3)
progress = function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
var.boot=data.table::rbindlist(foreach::foreach(boot.count=1:nb, .options.snow = opts, .packages = "data.table") %dopar% {
create_var_boot(dt,cnfd,dt2,cnfd2,dt3,cnfd3,nb,intv,reNAME,grpID,x0,x1,BF,stra,seed=seed*boot.count) })
snow::stopCluster(cl)
set.seed(seed)
bsRD1= bss(1,var.boot,F,F);bsRD2= bss(2,var.boot,F,F);bsRD3= bss(3,var.boot,F,F);bsRDT=bss(13,var.boot,F,F)
pmRD1=bss(16,var.boot,F,T);pmRD2=bss(17,var.boot,F,T);pmRD3=bss(18,var.boot,F,T)
if(BF){
bsRR1= bss(4,var.boot,T,T);bsRR2= bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bsOR1= bss(7,var.boot,T,T);bsOR2= bss(8,var.boot,T,T);bsOR3= bss(9,var.boot,T,T);bsORT=bss(15,var.boot,T,T)
pmRR1=bss(19,var.boot,F,T);pmRR2=bss(20,var.boot,F,T);pmRR3=bss(21,var.boot,F,T)
pmOR1=bss(22,var.boot,F,T);pmOR2=bss(23,var.boot,F,T);pmOR3=bss(24,var.boot,F,T)
}
}
library(foreach)
if(nb>0){
cl = snow::makeCluster(mc)
doSNOW::registerDoSNOW(cl)
pb = txtProgressBar(max = nb, style = 3)
progress = function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
var.boot=data.table::rbindlist(foreach::foreach(boot.count=1:nb, .options.snow = opts, .packages = "data.table") %dopar% {
create_var_boot(dt,cnfd,dt2,cnfd2,dt3,cnfd3,nb,intv,reNAME,grpID,x0,x1,BF,stra,seed=seed*boot.count) })
snow::stopCluster(cl)
set.seed(seed)
bsRD1= bss(1,var.boot,F,F);bsRD2= bss(2,var.boot,F,F);bsRD3= bss(3,var.boot,F,F);bsRDT=bss(13,var.boot,F,F)
pmRD1=bss(16,var.boot,F,T);pmRD2=bss(17,var.boot,F,T);pmRD3=bss(18,var.boot,F,T)
if(BF){
bsRR1= bss(4,var.boot,T,T);bsRR2= bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bsOR1= bss(7,var.boot,T,T);bsOR2= bss(8,var.boot,T,T);bsOR3= bss(9,var.boot,T,T);bsORT=bss(15,var.boot,T,T)
pmRR1=bss(19,var.boot,F,T);pmRR2=bss(20,var.boot,F,T);pmRR3=bss(21,var.boot,F,T)
pmOR1=bss(22,var.boot,F,T);pmOR2=bss(23,var.boot,F,T);pmOR3=bss(24,var.boot,F,T)
}
}
PP=PSE_four(GT,x0,x1,cnfd,cnfd2,cnfd3,V.matrix,BF)
psel=c("W>Y","W>S>Y","W>Q>Y","W>Q>S>Y","total")
if(BF){
pse_values=data.table::data.table(stat=c(rep("RD",5),rep("RR",5),rep("OR",5)),path=rep(psel,3),rbind(PP$RD,PP$RR,PP$OR))
}else{
pse_values=data.table::data.table(stat=c(rep("mean",5)),path=psel,PP$RD)
}
colnames(pse_values)[3:ncol(pse_values)]=c("effect",nnaa,"pm_effect")
pme_values=pse_values[,c(1,2,7)]
if(nb>0){
bsRD4=bss(10,var.boot,F,F);bsRR4=bss(11,var.boot,T,F);bsOR4=bss(12,var.boot,T,F)
pmRD4=bss(25,var.boot,F,T);pmRR4=bss(26,var.boot,F,T);pmOR4=bss(27,var.boot,F,T)
if(BF){
pse_values=cbind(pse_values[,1:6],rbind(bsRD1,bsRD2,bsRD3,bsRD4,bsRDT,bsRR1,bsRR2,bsRR3,bsRR4,bsRRT,bsOR1,bsOR2,bsOR3,bsOR4,bsORT))
# btbd(pse_values$effect[1],bsRD1,F),btbd(pse_values$effect[2],bsRD2,F),btbd(pse_values$effect[3],bsRD3,F),
# btbd(pse_values$effect[4],bsRD4,F),btbd(pse_values$effect[5],bsRDT,F),
# btbd(pse_values$effect[6],bsRR1,T),btbd(pse_values$effect[7],bsRR2,T),btbd(pse_values$effect[8],bsRR3,T),
# btbd(pse_values$effect[9],bsRR4,T),btbd(pse_values$effect[10],bsRRT,T),
# btbd(pse_values$effect[11],bsOR1,T),btbd(pse_values$effect[12],bsOR2,T),btbd(pse_values$effect[13],bsOR3,T),
# btbd(pse_values$effect[14],bsOR4,T),btbd(pse_values$effect[15],bsORT,T)))
}else{
pse_values=cbind(pse_values[,1:6],rbind(bsRD1,bsRD2,bsRD3,bsRD4,bsRDT))
# btbd(pse_values$effect[1],bsRD1,F),btbd(pse_values$effect[2],bsRD2,F),
# btbd(pse_values$effect[3],bsRD3,F),btbd(pse_values$effect[4],bsRD4,F),btbd(pse_values$effect[5],bsRDT,F)))
}
colnames(pse_values)[7:ncol(pse_values)]=c(nnbb,nnba)
if(abs(sum(sign(pse_values$effect[1:4])))==sum(pse_values$effect[1:4]!=0)){
if(BF){
pme_values=cbind(pme_values,rbind(pmRD1,pmRD2,pmRD3,pmRD4,pmRR1,pmRR2,pmRR3,pmRR4,pmOR1,pmOR2,pmOR3,pmOR4))
# btbd(pme_values$pm_effect[1],pmRD1,F),btbd(pme_values$pm_effect[2],pmRD2,F),
# btbd(pme_values$pm_effect[3],pmRD3,F),btbd(pme_values$pm_effect[4],pmRD4,F),rep(NA,3),
# btbd(pme_values$pm_effect[6],pmRR1,F),btbd(pme_values$pm_effect[7],pmRR2,F),
# btbd(pme_values$pm_effect[8],pmRR3,F),btbd(pme_values$pm_effect[9],pmRR4,F),rep(NA,3),
# btbd(pme_values$pm_effect[11],pmOR1,F),btbd(pme_values$pm_effect[12],pmOR2,F),
# btbd(pme_values$pm_effect[13],pmOR3,F),btbd(pme_values$pm_effect[14],pmOR4,F),rep(NA,3)))
}else{
pme_values=cbind(pme_values,rbind(pmRD1,pmRD2,pmRD3,pmRD4))
# btbd(pme_values$pm_effect[1],pmRD1,F),btbd(pme_values$pm_effect[2],pmRD2,F),
# btbd(pme_values$pm_effect[3],pmRD3,F),btbd(pme_values$pm_effect[4],pmRD4,F),rep(NA,3)))
}
colnames(pme_values)[4:ncol(pme_values)]=c(nnbb,nnba)
}
}else{
pse_values=pse_values[,1:6]
}
BF
pse_values=cbind(pse_values[,1:6],rbind(bsRD1,bsRD2,bsRD3,bsRD4,bsRDT,bsRR1,bsRR2,bsRR3,bsRR4,bsRRT,bsOR1,bsOR2,bsOR3,bsOR4,bsORT))
pme_values=cbind(pme_values,rbind(pmRD1,pmRD2,pmRD3,pmRD4,pmRR1,pmRR2,pmRR3,pmRR4,pmOR1,pmOR2,pmOR3,pmOR4))
pmRD1
rbind(pmRD1,pmRD2,pmRD3,pmRD4,pmRR1,pmRR2,pmRR3,pmRR4,pmOR1,pmOR2,pmOR3,pmOR4)
pme_values
library(devtools)
library(roxygen2)
#install_github("roqe/SOMM")
detach("package:PGCtest", unload=TRUE)
setwd("~/Dropbox/R_packages/PGCtest/")
document()
#check(manual = T)
#build_manual()
setwd("..")
install("PGCtest")
library(PGCtest)
load("~/Dropbox/R_packages/QwQ/C2_AI.RData")
c1=mediation_analysis(dt=dat,nb=100,intv=4,mc=5,stra=5,reNAME="uid")
detach("package:SOMM", unload=TRUE)
setwd("~/Dropbox/R_packages/SOMM/")
document()
#check(manual = T)
#build_manual()
setwd("..")
install("SOMM")
library(SOMM)
load("~/Dropbox/R_packages/QwQ/C2_AI.RData")
c1=mediation_analysis(dt=dat,nb=100,intv=4,mc=5,stra=5,reNAME="uid")
c1
load("~/Dropbox/R_packages/QwQ/C2_cov2.Rda")
dat[1:3,]
?mediation_analysis
c2=mediation_analysis(dt=dat,nb=100,intv=4,mc=10,stra=10,reNAME="uid")
sapply(paste0("~/Dropbox/R_packages/SOMM/R/",dir("~/Dropbox/R_packages/SOMM/R/")),source)
dt=dat;cnfd=c();dt2=NULL;cnfd2=c();dt3=NULL;cnfd3=c()
nb=100;intv=4;unit=1;reNAME="uid";grpID=NULL;mc=5;autoR=T;stra=5;seed=217;exact=T
if(!is.null(cnfd)){
if(!all(names(cnfd)%in%names(dt)) | is.null(names(cnfd)))
return("Colnames of covariates should a subset of colnames of dataset.")
}
print(paste0("Note: Estimating PSE on ",colnames(dt)[2],"(W) > ",colnames(dt)[3],"(Q) > ",colnames(dt)[4],"(S) > ",colnames(dt)[1],"(Y)"))
colnames(dt)[1:4]=c("Y","W","Q","S")
if(!is.null(reNAME)){
print("Warn: The asymptotic CI/p-values using random effect models may be inaccurate.")
if(nb==0){ nb=500; print("Note: Applying bootstrapping 500 times.") }
colnames(dt)[colnames(dt)==reNAME]="id"
}
if(!is.null(grpID)){
print("Warn: The asymptotic CI/p-values using conditional logistic models may be inaccurate.")
if(nb==0){ nb=500; print("Note: Applying bootstrapping 500 times.") }
colnames(dt)[colnames(dt)==grpID]="grp"
}
if(!is.null(dt2)){
print(paste0("Note: Using another population for estimating ",colnames(dt2)[1],"(W) > ",colnames(dt2)[2],"(Q) > ",colnames(dt2)[3],"(S)"))
colnames(dt2)[1:3]=c("W","Q","S")
colnames(dt2)[colnames(dt2)==grpID]="grp"
}
if(!is.null(dt3)){
print(paste0("Note: Using another population for estimating ",colnames(dt3)[1],"(W) > ",colnames(dt3)[2],"(Q)"))
colnames(dt3)[1:2]=c("W","Q")
colnames(dt3)[colnames(dt3)==grpID]="grp"
}
if(unit=="IQR"){
QQ=quantile(dt$W,na.rm=T);
x0=QQ[[2]]; x1=QQ[[4]]
}else{
x0=0; x1=1
}
GT=get_theta(dt,dt2,dt3,reNAME,grpID)
BF=ifelse(all(dt$Y%in%c(0,1)),T,F)
fid=unique(c(names(dt)[which(sapply(dt,is.factor))],names(dt)[which(sapply(dt,is.character))]))
eid1=names(cnfd)%in%c(fid,names(GT$theta_hat$bc))
eid2=names(cnfd2)%in%c(fid,names(GT$theta_hat$ac))
eid3=names(cnfd3)%in%c(fid,names(GT$theta_hat$dc))
if(sum(!eid1)!=0){ print(paste("model Y remove covariate:",paste(names(cnfd)[!eid1],collapse = ", "))) }
if(length(cnfd2)!=0&sum(!eid2)!=0){ print(paste("model S remove covariate:",paste(names(cnfd2)[!eid2],collapse = ", "))) }
if(length(cnfd3)!=0&sum(!eid3)!=0){ print(paste("model Q remove covariate:",paste(names(cnfd3)[!eid3],collapse = ", "))) }
cnfd=cnfd[eid1]; cnfd2=cnfd2[eid2]; cnfd3=cnfd3[eid3]
if(BF){
o11=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd)))
o10=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd)))
}else{
o11=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd))
o10=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd))
}
nnaa=c("lower(a)","upper(a)","pv(a)")
nnbb=c("lower(b)","upper(b)","pv(b)")
nnba=c("lower(n)","upper(n)","pv(n)")
V.matrix=create_vmatrix(GT)
if(sum(dt$S,na.rm = T)==0){
GT$theta_hat$bc[is.na(GT$theta_hat$bc)]=0
V.matrix[is.na(V.matrix)]=0
}
covnames=colnames(dt)[!colnames(dt)%in%c("Y","W","Q","S","id","grp")]
covnames
if(length(covnames)==0){ nnn=NULL }else{ nnn=paste0("+",paste0(covnames,collapse = "+")) }
if(all(dt$Y%in%c(0,1))){
print("Note: Applying random-effct models with probit link.")
y.reg=lme4::glmer(as.formula(paste0("Y~W+Q+S+(1|id)",nnn)), family=binomial(link="probit"), data=dt)
total.effect=summary(lme4::glmer(as.formula(paste0("Y~W+(1|id)",nnn)), family = binomial(link="probit"), data=dt))$coef[,1]
}else{
print("Note: Applying random-effct models with identity link.")
y.reg=lme4::lmer(as.formula(paste0("Y~W+Q+S+(1|id)",nnn)), data=dt)
total.effect=summary(lme4::lmer(as.formula(paste0("Y~W+(1|id)",nnn)), data=dt))$coef[,1]
}
if(all(dt$S==0)){
s.reg=lm(S~.-Y, data=dt)
}else{
s.reg=lme4::lmer(as.formula(paste0("S~W+Q+(1|id)",nnn)), data=dt)
}
q.reg=lme4::lmer(as.formula(paste0("Q~W+(1|id)",nnn)), data=dt)
yc=data.table::data.table(t(summary(y.reg)$coef[,1]))
covnames=names(yc)[which(!names(yc)%in%c("(Intercept)","Y","W","Q","S","id","grp"))]
beta.hat=data.table::data.table(I=ifelse("(Intercept)"%in%names(yc),yc[["(Intercept)"]],0),yc[1,c("W","Q")],
S=ifelse("S"%in%names(yc),yc[["S"]],0),yc[1,..covnames])
data.table::setnafill(beta.hat,fill = 0)
if(ifelse("S"%in%names(yc),!is.na(yc[["S"]]),F)){
alpha.hat=summary(s.reg)$coef[,1]
}else{
alpha.hat=beta.hat[,!"S"]
alpha.hat[1,]=0
}
ac=data.table::data.table(t(summary(s.reg)$coef[,1]))
alpha.hat=data.table::data.table(I=ifelse("(Intercept)"%in%names(ac),ac[["(Intercept)"]],0),ac[1,c("W")],
Q=ifelse("Q"%in%names(ac),ac[["Q"]],0),ac[1,..covnames])
names(ac)
ac[1,..covnames]
covnames
names(yc)
yc[1,..covnames]
ac[1,..covnames]
names(ac)
all(dt$S==0)
detach("package:SOMM", unload=TRUE)
setwd("~/Dropbox/R_packages/SOMM/")
document()
#check(manual = T)
#build_manual()
setwd("..")
install("SOMM")
library(SOMM)
load("~/Dropbox/R_packages/QwQ/C2_cov2.Rda")
c2=mediation_analysis(dt=dat,nb=100,intv=4,mc=10,stra=5,reNAME="uid")
sapply(paste0("~/Dropbox/R_packages/SOMM/R/",dir("~/Dropbox/R_packages/SOMM/R/")),source)
dt=dat;cnfd=c();dt2=NULL;cnfd2=c();dt3=NULL;cnfd3=c()
nb=100;intv=4;unit=1;reNAME="uid";grpID=NULL;mc=5;autoR=T;stra=5;seed=217;exact=T
if(!is.null(cnfd)){
if(!all(names(cnfd)%in%names(dt)) | is.null(names(cnfd)))
return("Colnames of covariates should a subset of colnames of dataset.")
}
print(paste0("Note: Estimating PSE on ",colnames(dt)[2],"(W) > ",colnames(dt)[3],"(Q) > ",colnames(dt)[4],"(S) > ",colnames(dt)[1],"(Y)"))
colnames(dt)[1:4]=c("Y","W","Q","S")
if(!is.null(reNAME)){
print("Warn: The asymptotic CI/p-values using random effect models may be inaccurate.")
if(nb==0){ nb=500; print("Note: Applying bootstrapping 500 times.") }
colnames(dt)[colnames(dt)==reNAME]="id"
}
if(!is.null(grpID)){
print("Warn: The asymptotic CI/p-values using conditional logistic models may be inaccurate.")
if(nb==0){ nb=500; print("Note: Applying bootstrapping 500 times.") }
colnames(dt)[colnames(dt)==grpID]="grp"
}
if(!is.null(dt2)){
print(paste0("Note: Using another population for estimating ",colnames(dt2)[1],"(W) > ",colnames(dt2)[2],"(Q) > ",colnames(dt2)[3],"(S)"))
colnames(dt2)[1:3]=c("W","Q","S")
colnames(dt2)[colnames(dt2)==grpID]="grp"
}
if(!is.null(dt3)){
print(paste0("Note: Using another population for estimating ",colnames(dt3)[1],"(W) > ",colnames(dt3)[2],"(Q)"))
colnames(dt3)[1:2]=c("W","Q")
colnames(dt3)[colnames(dt3)==grpID]="grp"
}
if(unit=="IQR"){
QQ=quantile(dt$W,na.rm=T);
x0=QQ[[2]]; x1=QQ[[4]]
}else{
x0=0; x1=1
}
GT=get_theta(dt,dt2,dt3,reNAME,grpID)
BF=ifelse(all(dt$Y%in%c(0,1)),T,F)
fid=unique(c(names(dt)[which(sapply(dt,is.factor))],names(dt)[which(sapply(dt,is.character))]))
eid1=names(cnfd)%in%c(fid,names(GT$theta_hat$bc))
eid2=names(cnfd2)%in%c(fid,names(GT$theta_hat$ac))
eid3=names(cnfd3)%in%c(fid,names(GT$theta_hat$dc))
if(sum(!eid1)!=0){ print(paste("model Y remove covariate:",paste(names(cnfd)[!eid1],collapse = ", "))) }
if(length(cnfd2)!=0&sum(!eid2)!=0){ print(paste("model S remove covariate:",paste(names(cnfd2)[!eid2],collapse = ", "))) }
if(length(cnfd3)!=0&sum(!eid3)!=0){ print(paste("model Q remove covariate:",paste(names(cnfd3)[!eid3],collapse = ", "))) }
cnfd=cnfd[eid1]; cnfd2=cnfd2[eid2]; cnfd3=cnfd3[eid3]
if(BF){
o11=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd)))
o10=pnorm(sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd)))
}else{
o11=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x1,cnfd))
o10=sum(GT$total[c("(Intercept)","W",names(cnfd))]*c(1,x0,cnfd))
}
nnaa=c("lower(a)","upper(a)","pv(a)")
nnbb=c("lower(b)","upper(b)","pv(b)")
nnba=c("lower(n)","upper(n)","pv(n)")
V.matrix=create_vmatrix(GT)
if(sum(dt$S,na.rm = T)==0){
GT$theta_hat$bc[is.na(GT$theta_hat$bc)]=0
V.matrix[is.na(V.matrix)]=0
}
if(nb>0){
cl = snow::makeCluster(mc)
doSNOW::registerDoSNOW(cl)
pb = txtProgressBar(max = nb, style = 3)
progress = function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
var.boot=data.table::rbindlist(foreach::foreach(boot.count=1:nb, .options.snow = opts, .packages = "data.table") %dopar% {
create_var_boot(dt,cnfd,dt2,cnfd2,dt3,cnfd3,nb,intv,reNAME,grpID,x0,x1,BF,stra,seed=seed*boot.count) })
snow::stopCluster(cl)
set.seed(seed)
bsRD1= bss(1,var.boot,F,F);bsRD2= bss(2,var.boot,F,F);bsRD3= bss(3,var.boot,F,F);bsRDT=bss(13,var.boot,F,F)
pmRD1=bss(16,var.boot,F,T);pmRD2=bss(17,var.boot,F,T);pmRD3=bss(18,var.boot,F,T)
if(BF){
bsRR1= bss(4,var.boot,T,T);bsRR2= bss(5,var.boot,T,T);bsRR3= bss(6,var.boot,T,T);bsRRT=bss(14,var.boot,T,T)
bsOR1= bss(7,var.boot,T,T);bsOR2= bss(8,var.boot,T,T);bsOR3= bss(9,var.boot,T,T);bsORT=bss(15,var.boot,T,T)
pmRR1=bss(19,var.boot,F,T);pmRR2=bss(20,var.boot,F,T);pmRR3=bss(21,var.boot,F,T)
pmOR1=bss(22,var.boot,F,T);pmOR2=bss(23,var.boot,F,T);pmOR3=bss(24,var.boot,F,T)
}
}
PP=PSE_four(GT,x0,x1,cnfd,cnfd2,cnfd3,V.matrix,BF)
GT
GT$theta_hat
p0000=omega(GT$theta_hat, c(x0,x0,x0,x0), cnfd,cnfd2,cnfd3, BF)
p1000=omega(GT$theta_hat, c(x1,x0,x0,x0), cnfd,cnfd2,cnfd3, BF) #first part of difference
p1100=omega(GT$theta_hat, c(x1,x1,x0,x0), cnfd,cnfd2,cnfd3, BF) #first part of difference
p1110=omega(GT$theta_hat, c(x1,x1,x1,x0), cnfd,cnfd2,cnfd3, BF) #first part of difference
p1111=omega(GT$theta_hat, c(x1,x1,x1,x1), cnfd,cnfd2,cnfd3, BF) #first part of difference
omega_values=data.table::data.table(p0000=p0000[1],p1000=p1000[1],p1100=p1100[1],p1110=p1110[1],p1111=p1111[1])
RD1=rd(p1000,p0000,V.matrix); RD2=rd(p1100,p1000,V.matrix); RD3=rd(p1110,p1100,V.matrix); RD4=rd(p1111,p1110,V.matrix); RDT=rd(p1111,p0000,V.matrix)
RDs=ifelse(abs(sum(sign(c(RD1[1],RD2[1],RD3[1],RD4[1]))))==sum(c(RD1[1],RD2[1],RD3[1],RD4[1])!=0),T,F)
p0000
BF
dim(V.matrix)
load("~/Dropbox/R_packages/QwQ/C2_cov2.Rda")
detach("package:SOMM", unload=TRUE)
setwd("~/Dropbox/R_packages/SOMM/")
document()
#check(manual = T)
#build_manual()
setwd("..")
install("SOMM")
library(SOMM)
c2=mediation_analysis(dt=dat,nb=100,intv=4,mc=10,stra=5,reNAME="uid",cnfd = c(age=25,sex=1))
c2
load("~/Dropbox/R_packages/QwQ/C2_cov0_x1.RData")
library(SOMM)
load("~/Dropbox/R_packages/QwQ/C2_cov0_x1.RData")
library(SOMM)
dat
library(devtools)
library(SOMM)
load("~/Dropbox/R_packages/QwQ/teest.RData")
names(dt)[6:29]=names(pred.val)
tt2=mediation_analysis(dt[,-5], cnfd=pred.val, intv=4)
tt5=mediation_analysis(dt[,1:8], cnfd=pred.val[1:3], intv=3, reNAME = "rep.id", nb = 100, mc=10, stra = 5)
library(devtools)
install_github("roqe/SOMM")
library(SOMM)
load("~/Dropbox/R_packages/QwQ/teest.RData")
names(dt)[6:29]=names(pred.val)
tt2=mediation_analysis(dt[,-5], cnfd=pred.val, intv=4)
tt5=mediation_analysis(dt[,1:8], cnfd=pred.val[1:3], intv=3, reNAME = "rep.id", nb = 100, mc=10, stra = 5)
library(devtools)
install_github("roqe/SOMM")
library(SOMM)
load("~/Dropbox/R_packages/QwQ/dat_1.RData")
pp1=mediation_analysis(dt=dat,nb=100,reNAME="uid",intv=4,mc=10,stra=5)
load("~/Dropbox/R_packages/QwQ/dt.RData")
View(dat)
library(SOMM)
mediation_analysis(dt=dat,nb=500,intv=4,mc=5,stra=5,reNAME="uid")
